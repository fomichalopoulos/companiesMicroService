networks:
  net:
    name: company-network

volumes:
  mongo-data:
    driver: local

services:

  mongoDB:
    image: mongo:7.0.14-jammy
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    volumes:
      - mongo-data:/data/db
    networks:
      - net

  api:
    container_name: api
    build: 
      context: ../
      dockerfile: Dockerfile
    image: company:second-version
    depends_on:
      mongoDB:
        condition: service_healthy
    networks:
      - net
    ports:
      - "8080:8080"
    environment:
      - MONGO_COMPANY_URI=${MONGO_COMPANY_URI}
      - WORKDIR=${WORKDIR}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_BROKER=${KAFKA_BROKER}

  mongoInit:
    container_name: temp_mongo_init
    build: 
      context: ../mongoInitialization/
      dockerfile: Dockerfile
    depends_on:
      mongoDB:
        condition: service_healthy
    image: mongo-init:first
    networks:
      - net
    environment:
      - MONGO_COMPANY_URI=${MONGO_COMPANY_URI}
    command: "/app/mongoInit4Company"

  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - net

  kafka:
    container_name: kafka
    image: 'wurstmeister/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CREATE_TOPICS=${TOPICS}
    depends_on:
      - zookeeper
    networks:
      - net






















