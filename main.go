/*
 * sump-kpi-backend-srv
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 */

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/caarlos0/env"
	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/davecgh/go-spew/spew"
	"github.com/fomichalopoulos/companiesMicroService/models"
	"github.com/fomichalopoulos/companiesMicroService/swagger"
	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type MongoConfig struct {
	Mongo_URI string `env:"MONGO_COMPANY_URI"`
}

/*
type KafkaConfig struct {
	KAFKA_TOPIC  string `env:"KAFKA_TOPIC"`
	KAFKA_BROKER string `env:"KAFKA_BROKER"`
}
*/

func loadDotEnv() error {
	err := godotenv.Load()
	if err != nil {
		return err
	}

	return nil

}

func initMongoClient() *mongo.Client {
	// This will raise an error when deployed containerized
	if err := loadDotEnv(); err != nil {
		log.Printf("error: %s loading .env file", err)
	}

	mongocfg := MongoConfig{}
	if err := env.Parse(&mongocfg); err != nil {
		log.Printf("Error in parsing : %v", err)
	}

	clientOpts := options.Client().ApplyURI(mongocfg.Mongo_URI)
	client, err := mongo.Connect(context.TODO(), clientOpts)
	spew.Dump(mongocfg)
	if err != nil {
		log.Fatalf("Error in instantiating mongo client %v", err)
	}

	return client
}

func main() {
	log.Printf("Server started")

	mongoClient := initMongoClient()

	kafkacfg := models.KafkaConfig{}
	if err := env.Parse(&kafkacfg); err != nil {
		log.Printf("Error in parsing : %v", err)
	}
	spew.Dump(kafkacfg)

	// 2. Create a new Kafka producer configuration
	producer, err := kafka.NewProducer(&kafka.ConfigMap{
		"bootstrap.servers": kafkacfg.KAFKA_BROKER, // The Kafka broker address
	})

	if err != nil {
		log.Fatalf("Failed to create producer: %s", err)
	}
	defer producer.Close()

	// 3. Set up a go-routine to handle delivery reports (optional)
	go func() {
		for e := range producer.Events() {
			switch ev := e.(type) {
			case *kafka.Message:
				if ev.TopicPartition.Error != nil {
					fmt.Printf("Failed to deliver message: %v\n", ev.TopicPartition)
				} else {
					fmt.Printf("Successfully delivered message to %v\n", ev.TopicPartition)
				}
			}
		}
	}()

	//mongoClient := &mongo.Client{}

	router := swagger.NewRouter(mongoClient, kafkacfg, producer)

	log.Fatal(http.ListenAndServe(":8080", router))
}
